{"version":3,"file":"static/js/294.1a0887a4.chunk.js","mappings":"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","sources":["components/PeerManager.js","components/ui/input.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { socket } from '../utils/config';\n\nconst PeerManager = ({ currentWallet }) => {\n    const [peerAddress, setPeerAddress] = useState('');\n    const [peers, setPeers] = useState([]);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        // Load saved peers from localStorage\n        const savedPeers = localStorage.getItem(`peers_${currentWallet}`);\n        if (savedPeers) {\n            setPeers(JSON.parse(savedPeers));\n        }\n\n        // Listen for peer connection events\n        const handlePeerConnected = (data) => {\n            console.log('Peer connected:', data);\n            if (data.address && !peers.includes(data.address)) {\n                const updatedPeers = [...peers, data.address];\n                setPeers(updatedPeers);\n                localStorage.setItem(`peers_${currentWallet}`, JSON.stringify(updatedPeers));\n            }\n        };\n\n        const handlePeerRequest = (data) => {\n            if (data.requester && !peers.includes(data.requester)) {\n                const updatedPeers = [...peers, data.requester];\n                setPeers(updatedPeers);\n                localStorage.setItem(`peers_${currentWallet}`, JSON.stringify(updatedPeers));\n                // Notify the requester that we accepted\n                socket.emit('peer_accepted', {\n                    address: currentWallet,\n                    acceptedPeer: data.requester\n                });\n            }\n        };\n\n        socket.on('peer_connected', handlePeerConnected);\n        socket.on('peer_request', handlePeerRequest);\n\n        return () => {\n            socket.off('peer_connected', handlePeerConnected);\n            socket.off('peer_request', handlePeerRequest);\n        };\n    }, [currentWallet, peers]);\n\n    const addPeer = async () => {\n        try {\n            if (!peerAddress) {\n                setError('Lütfen bir cüzdan adresi girin');\n                return;\n            }\n\n            if (peerAddress === currentWallet) {\n                setError('Kendi cüzdan adresinizi ekleyemezsiniz');\n                return;\n            }\n\n            if (peers.includes(peerAddress)) {\n                setError('Bu cüzdan adresi zaten ekli');\n                return;\n            }\n\n            // Emit peer connection request\n            socket.emit('add_peer', {\n                address: peerAddress,\n                requester: currentWallet\n            });\n\n            setPeerAddress('');\n            setError('');\n\n        } catch (error) {\n            console.error('Peer ekleme hatası:', error);\n            setError('Peer eklenirken bir hata oluştu');\n        }\n    };\n\n    const removePeer = (address) => {\n        const updatedPeers = peers.filter(peer => peer !== address);\n        setPeers(updatedPeers);\n        localStorage.setItem(`peers_${currentWallet}`, JSON.stringify(updatedPeers));\n        \n        // Notify the peer that they were removed\n        socket.emit('peer_removed', {\n            address: currentWallet,\n            removedPeer: address\n        });\n    };\n\n    return (\n        <div className=\"space-y-4 p-4 bg-white rounded-lg shadow\">\n            <h2 className=\"text-lg font-semibold mb-4\">Kişiler</h2>\n            <div className=\"flex gap-2\">\n                <Input\n                    type=\"text\"\n                    placeholder=\"Cüzdan adresi ekle\"\n                    value={peerAddress}\n                    onChange={(e) => setPeerAddress(e.target.value)}\n                    className=\"flex-1\"\n                />\n                <Button onClick={addPeer}>Ekle</Button>\n            </div>\n            {error && <p className=\"text-red-500 text-sm\">{error}</p>}\n            <div className=\"space-y-2\">\n                {peers.map((peer, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                        <span className=\"text-sm\">\n                            {peer.slice(0, 6)}...{peer.slice(-4)}\n                        </span>\n                        <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removePeer(peer)}\n                        >\n                            Kaldır\n                        </Button>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default PeerManager;\n","import * as React from \"react\"\nimport { cn } from \"../../lib/utils\"\n\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":["_ref","currentWallet","peerAddress","setPeerAddress","useState","peers","setPeers","error","setError","useEffect","savedPeers","localStorage","getItem","concat","JSON","parse","handlePeerConnected","data","console","log","address","includes","updatedPeers","setItem","stringify","handlePeerRequest","requester","socket","emit","acceptedPeer","on","off","_jsxs","className","children","_jsx","Input","type","placeholder","value","onChange","e","target","Button","onClick","async","map","peer","index","slice","variant","size","filter","removedPeer","removePeer","React","ref","props","_objectWithoutProperties","_excluded","_objectSpread","cn","displayName"],"sourceRoot":""}