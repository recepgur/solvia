import requests
import csv
from typing import List, Dict
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ExploitDBCollector:
    def __init__(self):
        self.base_url = "https://www.exploit-db.com/api/v1"
        self.output_file = "exploit_db_data.csv"
        
    def collect_exploits(self) -> List[Dict]:
        """Collect exploit data from Exploit-DB."""
        try:
            logger.info("Collecting data from Exploit-DB")
            response = requests.get(f"{self.base_url}/exploits")
            if response.status_code == 200:
                return response.json()["data"]
            else:
                logger.error(f"Failed to collect data: {response.status_code}")
                return []
        except Exception as e:
            logger.error(f"Error collecting exploit data: {e}")
            return []
            
    def save_to_csv(self, exploits: List[Dict]) -> None:
        """Save collected exploits to CSV file."""
        if not exploits:
            logger.warning("No exploits to save")
            return
            
        try:
            with open(self.output_file, 'w', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=exploits[0].keys())
                writer.writeheader()
                writer.writerows(exploits)
            logger.info(f"Saved {len(exploits)} exploits to {self.output_file}")
        except Exception as e:
            logger.error(f"Error saving exploits to CSV: {e}")
            
    def run(self) -> None:
        """Run the collection process."""
        exploits = self.collect_exploits()
        self.save_to_csv(exploits)

if __name__ == "__main__":
    collector = ExploitDBCollector()
    collector.run()
